(self.webpackChunkh4g_limo=self.webpackChunkh4g_limo||[]).push([[1992],{31992:(e,i,t)=>{"use strict";t.r(i),t.d(i,{default:()=>x});var s=t(16304),l=t(8651),a=t(6041),n=t(93668),o=t(42961),r=t(43435),h=t(54704),p=t(57319),d=t(46942),y=(t(12131),t(47648),t(18419),t(8680)),u=t(95046),c=t(90626),m=t(2379),_=t(37e3),w=t(62775),g=t(42806),V=t(34430),b=t(32264),v=t(28690),f=t(67692),S=t(64713),C=t(61789),I=t(93729);class P{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let k=class extends((0,f.y)(I.Z)){constructor(){super(...arguments),this._handles=new r.Z,this._bitmapIndex=new Map,this._mapImageContainer=new v.c,this._kmlVisualData=new P,this.allVisiblePoints=new V.JN,this.allVisiblePolylines=new V.JN,this.allVisiblePolygons=new V.JN,this.allVisibleMapImages=new o.Z}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return Promise.all(t).then(e=>e.filter(e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e))[0]||null)}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._handles.add([this.allVisibleMapImages.on("change",e=>{e.added.forEach(e=>this._addMapImage(e)),e.removed.forEach(e=>this._removeMapImage(e))})]),this.container.addChild(this._mapImageContainer),this._polygonsView=new C.Z({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new S.Z(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new C.Z({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new S.Z(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new C.Z({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new S.Z(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1)}this._refreshCollections()}),this._fetchingPromise=this._fetchService().then(()=>{this._fetchingPromise=null,this.notifyChange("updating")})}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&(0,n.default)(e.href,{responseType:"image"}).then(({data:i})=>{let t=u.Z.fromJSON(e.extent);(0,_.Q8)(t,this.view.spatialReference)&&(t=(0,_.iV)(t,this.view.spatialReference));const s=new b.eY(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)})}_getViewDependentUrl(e,i){return(0,s.Z)(function*(){const{viewFormat:t,viewBoundScale:s,httpQuery:l}=e;if((0,h.pC)(t)){if((0,h.Wi)(i))throw new Error("Loading this network link requires a view state.");let n;if(yield(0,c.zD)(),(0,h.pC)(s)&&1!==s){const e=new u.Z(i.extent);e.expand(s),n=e}else n=i.extent;n=(0,c.iV)(n,m.Z.WGS84);const o=(0,c.iV)(n,m.Z.WebMercator),r=n.xmin,d=n.xmax,y=n.ymin,_=n.ymax,w=i.size[0]*i.pixelRatio,V=i.size[1]*i.pixelRatio,b=Math.max(o.width,o.height),v={"[bboxWest]":r.toString(),"[bboxEast]":d.toString(),"[bboxSouth]":y.toString(),"[bboxNorth]":_.toString(),"[lookatLon]":n.center.x.toString(),"[lookatLat]":n.center.y.toString(),"[lookatRange]":b.toString(),"[lookatTilt]":"0","[lookatHeading]":i.rotation.toString(),"[lookatTerrainLon]":n.center.x.toString(),"[lookatTerrainLat]":n.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":n.center.x.toString(),"[cameraLat]":n.center.y.toString(),"[cameraAlt]":b.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":w.toString(),"[vertPixels]":V.toString(),"[terrainEnabled]":"0","[clientVersion]":a.i8,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},f=e=>{for(const i in e)for(const t in v)e[i]=e[i].replace(t,v[t])},S=(0,p.u0)(t);f(S);let C={};(0,h.pC)(l)&&(C=(0,p.u0)(l),f(C));const I=(0,g.en)(e.href);return I.query={...I.query,...S,...C},`${I.path}?${(0,p.B7)(S)}`}return e.href})()}_fetchService(){var e=this;return(0,s.Z)(function*(){const i=new P;yield e._loadVisualData(e.layer.url,i),e._kmlVisualData=i,e._refreshCollections()})()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const i=this._kmlVisualData.allSublayers.get(e);return!!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))}_loadVisualData(e,i){var t=this;return this._fetchParsedKML(e).then(function(){var e=(0,s.Z)(function*(e){for(const s of e.sublayers){i.allSublayers.set(s.id,s);const e=s.points?yield(0,w.Yu)(s.points):[],l=s.polylines?yield(0,w.Yu)(s.polylines):[],a=s.polygons?yield(0,w.Yu)(s.polygons):[],n=s.mapImages||[];if(i.allPoints.push(...e.map(e=>({item:e,sublayerId:s.id}))),i.allPolylines.push(...l.map(e=>({item:e,sublayerId:s.id}))),i.allPolygons.push(...a.map(e=>({item:e,sublayerId:s.id}))),i.allMapImages.push(...n.map(e=>({item:e,sublayerId:s.id}))),s.networkLink){const e=yield t._getViewDependentUrl(s.networkLink,t.view.state);yield t._loadVisualData(e,i)}}});return function(i){return e.apply(this,arguments)}}())}_fetchParsedKML(e){return(0,w.CS)(e,this.view.spatialReference,this.layer.refreshInterval).then(e=>(0,w.Cw)(e.data))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))}};(0,l._)([(0,d.Cb)()],k.prototype,"_pointsView",void 0),(0,l._)([(0,d.Cb)()],k.prototype,"_polylinesView",void 0),(0,l._)([(0,d.Cb)()],k.prototype,"_polygonsView",void 0),(0,l._)([(0,d.Cb)()],k.prototype,"_fetchingPromise",void 0),(0,l._)([(0,d.Cb)()],k.prototype,"updating",void 0),k=(0,l._)([(0,y.j)("esri.views.2d.layers.KMLLayerView2D")],k);var x=k}}]);
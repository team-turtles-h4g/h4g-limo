(self.webpackChunkh4g_limo=self.webpackChunkh4g_limo||[]).push([[1392],{61392:(e,t,a)=>{"use strict";a.r(t),a.d(t,{applyEdits:()=>c});var r=a(16304),i=a(4706),s=a(42961),d=a(2747),n=a(69141),l=a(54704),u=a(57319),o=a(11909);function p(e){return e&&null!=e.applyEdits}function c(e,t,a){return h.apply(this,arguments)}function h(){return(h=(0,r.Z)(function*(e,t,a,r={}){let i,s;const d={edits:a,result:new Promise((e,t)=>{i=e,s=t})};e.emit("apply-edits",d);try{var l;const{results:s,edits:d}=yield y(e,t,a,r),u=e=>e.filter(e=>!e.error).map(n.d9),o={edits:d,addedFeatures:u(s.addFeatureResults),updatedFeatures:u(s.updateFeatureResults),deletedFeatures:u(s.deleteFeatureResults),addedAttachments:u(s.addAttachmentResults),updatedAttachments:u(s.updateAttachmentResults),deletedAttachments:u(s.deleteAttachmentResults)};return null!=(l=s.editedFeatureResults)&&l.length&&(o.editedFeatures=s.editedFeatureResults),(o.addedFeatures.length||o.updatedFeatures.length||o.deletedFeatures.length||o.addedAttachments.length||o.updatedAttachments.length||o.deletedAttachments.length)&&e.emit("edits",o),i(o),s}catch(f){throw s(f),f}})).apply(this,arguments)}function y(e,t,a,r){return m.apply(this,arguments)}function m(){return(m=(0,r.Z)(function*(e,t,a,r){if(yield e.load(),!p(t))return Promise.reject(new d.Z(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e}));if(!e.editingEnabled)throw new d.Z(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const{edits:i,options:s}=yield f(e,a,r);return i.addFeatures.length||i.updateFeatures.length||i.deleteFeatures.length||i.addAttachments.length||i.updateAttachments.length||i.deleteAttachments.length?{edits:i,results:yield t.applyEdits(i,s)}:{edits:i,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}})).apply(this,arguments)}function f(e,t,a){return g.apply(this,arguments)}function g(){return(g=(0,r.Z)(function*(e,t,a){const r=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments);if(!t||!(t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures)||r))throw new d.Z(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&a&&a.gdbVersion)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&a&&a.rollbackOnFailureEnabled)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&a&&a.globalIdUsed)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&r)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!a||!a.globalIdUsed)&&r)throw new d.Z(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const i={...a};if(null!=i.rollbackOnFailureEnabled||e.capabilities.editing.supportsRollbackOnFailure||(i.rollbackOnFailureEnabled=!0),!1===i.rollbackOnFailureEnabled&&"original-and-current-features"===i.returnServiceEditsOption)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'original-and-current-features' is valid for 'returnServiceEditsOption' only when 'rollBackOnFailure' is true.");if(!e.capabilities.editing.supportsReturnServiceEditsInSourceSpatialReference&&i.returnServiceEditsInSourceSR)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'returnServiceEditsInSourceSR' parameter. See: 'capabilities.editing.supportsReturnServiceEditsInSourceSpatialReference'");if(i.returnServiceEditsInSourceSR&&"original-and-current-features"!==i.returnServiceEditsOption)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'returnServiceEditsOption' is valid only when 'returnServiceEditsOption' is set to 'original-and-current-features'");const n={...t};if(n.addFeatures=t&&s.Z.isCollection(t.addFeatures)?t.addFeatures.toArray():n.addFeatures||[],n.updateFeatures=t&&s.Z.isCollection(t.updateFeatures)?t.updateFeatures.toArray():n.updateFeatures||[],n.deleteFeatures=t&&s.Z.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():n.deleteFeatures||[],n.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(n.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(n.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");n.addAttachments=n.addAttachments||[],n.updateAttachments=n.updateAttachments||[],n.deleteAttachments=n.deleteAttachments||[],n.addFeatures=n.addFeatures.map(E),n.updateFeatures=n.updateFeatures.map(E);const l=a&&a.globalIdUsed;return n.addFeatures.forEach(t=>w(t,e,l)),n.updateFeatures.forEach(t=>A(t,e,l)),n.deleteFeatures.forEach(t=>F(t,e,l)),n.addAttachments.forEach(t=>v(t,e)),n.updateAttachments.forEach(t=>v(t,e)),{edits:yield Z(n),options:i}})).apply(this,arguments)}function b(e,t,a){if(a){if("attributes"in e&&!e.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&(0,l.pC)(e.geometry)){if(e.geometry.hasZ&&!1===t.capabilities.data.supportsZ)throw new d.Z(`${t.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===t.capabilities.data.supportsM)throw new d.Z(`${t.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function w(e,t,a){b(e,t,a)}function F(e,t,a){b(e,t,a)}function A(e,t,a){if(b(e,t,a),"geometry"in e&&(0,l.pC)(e.geometry)&&!t.capabilities.editing.supportsGeometryUpdate)throw new d.Z(`${t.type}-layer:unsupported-operation`,"Layer does not support geometry updates.")}function v(e,t){const{feature:a,attachment:r}=e;if(!a||"attributes"in a&&!a.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in a)&&!a.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!r.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!r.data&&!r.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(r.data instanceof File&&r.data.name||r.name))throw new d.Z(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&r.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof r.data){const e=(0,u.sJ)(r.data);if(e&&!e.isBase64)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}function Z(e){return I.apply(this,arguments)}function I(){return(I=(0,r.Z)(function*(e){const t=e.addFeatures,a=e.updateFeatures,r=t.concat(a).map(e=>e.geometry),i=yield(0,o.aX)(r),s=t.length,d=a.length;return i.slice(0,s).forEach((t,a)=>e.addFeatures[a].geometry=t),i.slice(s,s+d).forEach((t,a)=>e.updateFeatures[a].geometry=t),e})).apply(this,arguments)}function E(e){const t=new i.Z;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}}}]);